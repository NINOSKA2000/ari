//*** Funciones para color HSLA ***

// - Crea un color en formato HSL para CSS en base a variables creadas de un color en formato Hex
@function vcolor($idColor) {
  @return hsl(var(--color_#{$idColor}_H), var(--color_#{$idColor}_S), var(--color_#{$idColor}_L));
}

// - Función para oscurecer un color con variables CSS en SCSS
@function hsl_d($idColor, $percentage) {
  $color_h: var(--color_#{$idColor}_H);
  $color_s: var(--color_#{$idColor}_S);
  $color_l: var(--color_#{$idColor}_L);
  @return hsl($color_h, $color_s, calc(#{$color_l} - #{$percentage}#{'%'}));
}

@function hsl_l($colorName, $percentage) {
  $color: get-color($colorName); // Obtener el color usando la función get-color
  $color_h: hue($color); // Obtener el matiz del color
  $color_s: saturation($color); // Obtener la saturación del color
  $color_l: lightness($color); // Obtener la luminosidad del color
  @return hsl($color_h, $color_s, calc(#{$color_l} + #{$percentage} * 1%)); // Devolver el nuevo color HSL
}

// - Función para dar transparencia a un color con variables CSS en SCSS
@function hsl_a($numColor, $alpha) {
  $color_h: var(--color_#{$numColor}_H);
  $color_s: var(--color_#{$numColor}_S);
  $color_l: var(--color_#{$numColor}_L);
  @return hsla($color_h, $color_s, $color_l, $alpha);
}

//*** Funciones para Utilidades ***

// - Funcion que convierte pixeles a rem
@function rem($value) {
  @return ($value / option(fz-init)) * 1rem;
}

// - Funcion que genera clases en base a un mapa de variables
@mixin generateClass($array, $propKey, $category: '') {
  @each $key, $value in $array {
    $prop: map-get($shortsProps, $propKey);
    @if $category != '' {
      .#{$propKey}--#{$category}--#{$key} {
        #{$prop}: var(--color_#{$category}_#{$key});
      }
    } @else {
      .#{$propKey}--#{$key} {
        #{$prop}: var(--color_#{$key});
      }
    }
  }
}

// Mixin para alinear un contenedor horizontal y verticalmente
@mixin center-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin home-container {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  gap: 2rem;
  // margin: 4rem;
  padding: 4rem 2rem;

  @include media(tablet) {
    padding: 6rem 6rem;
  }

  @include media(desktop) {
    padding: 6rem 8rem;
  }
}

@mixin gradient-underline {
  // Estilos iniciales sin subrayado
  &::before {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0; // Ajusta la posición del subrayado
    width: 100%;
    height: 2px;
    // background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 50%, rgba(255,255,255,0) 100%);

    background-image: linear-gradient(90deg, #d037d8, #6640ff 75%, #0ea4ca);

    transform: scaleX(0); // Inicialmente oculto
    transform-origin: left;
    transition: transform 0.4s ease;
  }

  // Efecto hover para el subrayado
  &:hover::before {
    transform: scaleX(1); // Se expande al pasar el mouse
  }
}

@mixin text-underline {
  // Estilos iniciales del subrayado
  &::before {
    content: '';
    position: absolute;
    bottom: 0; // Posiciona el subrayado justo debajo del texto
    left: 50%; // Comienza desde el centro
    transform: translateX(-50%); // Ajusta para centrar el subrayado
    height: 2px;
    width: 0; // Inicialmente oculto
    background-image: linear-gradient(90deg, #d037d8, #6640ff 75%, #0ea4ca);
    transition: width 0.4s ease; // Anima la expansión del subrayado
  }

  // Efecto hover para el subrayado
  &:hover::before {
    width: 50%; // El subrayado abarcará todo el ancho del texto al hacer hover
  }
}

@mixin container {
  padding: 1rem 1.5rem;
  border-radius: brd(2);
  box-shadow: bsh(3);
  background-color: get-color(white_s1);

  p {
    color: get-color(grey2_s4);
  }
}

// @mixin scrollTeme {
//   /* Personalización de las barras de desplazamiento */
//   &::-webkit-scrollbar {
//     width: 0.4rem;
//     height: 0.3rem;
//   }

//   &::-webkit-scrollbar-thumb {
//     background-image: linear-gradient(to right, #8e2de2, #4a00e0);
//     background-image: linear-gradient(to right, rgba(get-color(lilac_p3), 0.3), rgba(get-color(blue_p1), 0.4));
//     background-image: linear-gradient(to right, rgba(get-color(grey2_s4), 0.5), rgba(get-color(forms_s6), 1));

//     border-radius: none;
//     &:hover {
//       background-image: linear-gradient(100deg, get-color(lilac_p3) 30%, get-color(blue_p1) 64%);
//     }
//   }
// }

@mixin scrollTeme {
  /* Personalización de las barras de desplazamiento */
  &::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.2rem;
    opacity: 0; /* Inicialmente invisible */
    transition: opacity 0.3s ease; /* Transición suave */
  }

  &::-webkit-scrollbar-thumb {
    background-image: linear-gradient(to right, rgba(get-color(grey2_s4), 0.5), rgba(get-color(forms_s6), 1));
    border-radius: none;
    transition: background-image 0.3s ease; /* Transición suave para el color */

    &:hover {
      background-image: linear-gradient(100deg, get-color(lilac_p3) 30%, get-color(blue_p1) 64%);
    }
  }

  /* Mostrar la barra de desplazamiento cuando el usuario haga hover sobre el componente */
  &:hover {
    &::-webkit-scrollbar {
      opacity: 1; /* Se vuelve visible */
    }
  }
}

@mixin cardStyleType($color) {
  box-shadow: -1.83697e-16px 3px 10px rgba(get-color($color), 0.02);

  .card-type {
    p {
      color: darken(get-color($color), 1%);
      // background-color: rgba(get-color($color), 0.1);
    }

    .type_icon {
      svg {
        border-bottom: 2px solid rgba(get-color($color), 0.5);
        padding: 0.25rem;
        path {
          fill: darken(get-color($color), 70%);
          box-shadow: -1.83697e-16px 3px 10px rgba(get-color(white_s1), 0.12);
        }
      }
    }
  }

  .report {
    background: linear-gradient(to left, rgba(get-color($color), 0.8), rgba(get-color($color), 0.9));

    &:hover,
    :focus {
      box-shadow: bsh(3);
      background: linear-gradient(to top, rgba(get-color($color), 1), rgba(get-color($color), 1));
    }

    svg {
      width: 3rem;
      height: auto;
      path {
        fill: get-color(white_s1);
      }
    }
  }

  .admin {
    svg {
      path {
        // fill: darken(get-color($color), 2%);
        fill: darken(get-color($color), 20%);
      }
    }
  }
}
