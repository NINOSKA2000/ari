// styles/LineContainers.scss

$line-color: get-color(t2-ligthBlue);
$common-container-color: get-color(t5-green);

.diagram {
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 100px;

  .line {
    width: 100%;
    position: absolute;

    path {
      fill: transparent;
      stroke: $line-color;
      strokewidth: 2px;
      animation: dashed 1s infinite;
    }
  }

  @keyframes dashed {
    0% {
      stroke-dashoffset: 100%;
    }
    50% {
      stroke-dashoffset: 50%;
    }
    100% {
      stroke-dashoffset: 0%;
    }
  }

  .commonContainer {
    width: 50px;
    height: 50px;
    background-color: $common-container-color;
    z-index: 1;
  }
}

// estilos para el circulo

$daddy-border: 1px solid black;
$daddy-size: 400px;
$daddy-perspective: 600px;
$amount: 200;
$radius: 200px;
$pi: 3.14159265359;

.daddy {
  // border: $daddy-border;

  position: relative;
  perspective: 600px;

  transform-style: preserve-3d;

  width: calc(30% + 1.3px);
  height: 35px;

  @include media(tablet) {
    perspective: $daddy-perspective;
    width: calc(150% + 1.3px);
    width: $daddy-size;
    height: $daddy-size;
    height: 85px;
  }
}

.mommy {
  width: $daddy-size;
  height: $daddy-size;
  transform-style: preserve-3d;
  animation: rotation 7s linear infinite;
  @include media(tablet) {
    animation: rotation 10s linear infinite;
  }
}

.mommy div {
  display: block;
  width: 2px;
  height: 2px;
  border-radius: brd(f);
  background-color: get-color(t2-ligthBlue);
  background-image: linear-gradient(to right, #8d2de2dd, get-color(t2-ligthBlue));
  position: absolute;
  top: -2px;
  left: -2px;

  @include media(tablet) {
    width: 3px;
    height: 3px;
  }
}

@for $i from 1 through $amount {
  $theta: ($i / $amount) * 120;
  $delta: ($i / $amount - 0.5) * $pi;
  $x: $radius * cos($delta) * cos($theta) + $radius;
  $y: $radius * cos($delta) * sin($theta) + $radius;
  $z: $radius * sin($delta);

  .mommy div:nth-child(#{$i}) {
    transform: translate3d($x, $y, $z);
  }
}

@keyframes rotation {
  to {
    transform: rotateY(360deg);
  }
}

//orbota
// Orbita.scss
$total: 300; // total particles
$orb-size: 100px;
$particle-size: 2px;
$time: 14s;
$base-hue: 180; // change for diff colors (180 is nice)

.container-orbita {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 300px; // puedes ajustar esta altura seg√∫n tus necesidades
  width: 100%;
}

.wrap {
  position: relative;
  width: 0;
  height: 0;
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: rotate $time infinite linear; // rotate orb
}

@keyframes rotate {
  100% {
    transform: rotateY(360deg) rotateX(360deg);
  }
}

.c {
  position: absolute;
  width: $particle-size;
  height: $particle-size;
  border-radius: 50%;
  opacity: 0;
}

@for $i from 1 through $total {
  $z: (random(360) * 1deg); // random angle to rotateZ
  $y: (random(360) * 1deg); // random to rotateX
  $hue: ((40 / $total * $i) + $base-hue); // set hue

  .c:nth-child(#{$i}) {
    // grab the nth particle
    animation: orbit#{$i} $time infinite;
    animation-delay: ($i * 0.01s);
    background-color: hsla($hue, 100%, 50%, 1);
  }

  @keyframes orbit#{$i} {
    20% {
      opacity: 1; // fade in
    }
    30% {
      transform: rotateZ(-$z) rotateY($y) translateX($orb-size) rotateZ($z); // form orb
    }
    80% {
      transform: rotateZ(-$z) rotateY($y) translateX($orb-size) rotateZ($z); // hold orb state 30-80
      opacity: 1; // hold opacity 20-80
    }
    100% {
      transform: rotateZ(-$z) rotateY($y) translateX(($orb-size * 3)) rotateZ($z); // translateX * 3
    }
  }
}
